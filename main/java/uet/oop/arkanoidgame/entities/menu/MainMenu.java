package uet.oop.arkanoidgame.entities.menu;

import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import uet.oop.arkanoidgame.GamePanel;
import uet.oop.arkanoidgame.entities.data.GameSaveManager;
import uet.oop.arkanoidgame.SoundManager;
import uet.oop.arkanoidgame.Setting.SettingScreen;

public class MainMenu extends StackPane {

    // M√†u s·∫Øc v√† style t√πy ch·ªânh
    private static final String FONT_SIZE = "15px";
    private static final String BUTTON_RADIUS = "15";
    private static final String BUTTON_PADDING = "10 30 10 30";

    // Style cho n√∫t b√¨nh th∆∞·ªùng: n·ªÅn t·ªëi, ch·ªØ neon
    private static final String NORMAL_STYLE =
            "-fx-background-color: rgba(30, 30, 60, 0.8);" // N·ªÅn t√≠m ƒë·∫≠m trong su·ªët
                    + "-fx-text-fill: #00ffff;" // Ch·ªØ xanh Cyan Neon
                    + "-fx-font-size: " + FONT_SIZE + ";"
                    + "-fx-font-weight: bold;"
                    + "-fx-border-color: #00ffff;" // Vi·ªÅn neon
                    + "-fx-border-width: 2;"
                    + "-fx-border-radius: " + BUTTON_RADIUS + ";"
                    + "-fx-background-radius: " + BUTTON_RADIUS + ";"
                    + "-fx-padding: " + BUTTON_PADDING + ";";

    // Style khi di chu·ªôt qua: chuy·ªÉn sang m√†u v√†ng/cam s√°ng
    private static final String HOVER_STYLE =
            "-fx-background-color: linear-gradient(to bottom, #ffc04c, #ff8c00);" // Gradient ·∫•m √°p
                    + "-fx-text-fill: #1a1a1a;" // Ch·ªØ ƒëen/x√°m ƒë·∫≠m
                    + "-fx-font-size: " + FONT_SIZE + ";"
                    + "-fx-font-weight: bold;"
                    + "-fx-border-color: #ffc04c;"
                    + "-fx-border-width: 2;"
                    + "-fx-border-radius: " + BUTTON_RADIUS + ";"
                    + "-fx-background-radius: " + BUTTON_RADIUS + ";"
                    + "-fx-padding: " + BUTTON_PADDING + ";";

    // Style cho n√∫t b·ªã v√¥ hi·ªáu h√≥a
    private static final String DISABLED_STYLE =
            "-fx-background-color: rgba(50, 50, 50, 0.5);" // N·ªÅn x√°m t·ªëi
                    + "-fx-text-fill: #666666;" // Ch·ªØ x√°m
                    + "-fx-font-size: " + FONT_SIZE + ";"
                    + "-fx-font-weight: bold;"
                    + "-fx-border-color: #666666;" // Vi·ªÅn x√°m
                    + "-fx-border-width: 2;"
                    + "-fx-border-radius: " + BUTTON_RADIUS + ";"
                    + "-fx-background-radius: " + BUTTON_RADIUS + ";"
                    + "-fx-padding: " + BUTTON_PADDING + ";"
                    + "-fx-opacity: 0.5;";

    // Hi·ªáu ·ª©ng ƒë·ªï b√≥ng m·∫°nh h∆°n, m√¥ ph·ªèng √°nh s√°ng neon
    DropShadow neonShadow = new DropShadow(20, Color.web("#00ffff")); // M√†u neon xanh

    private final Stage stage;
    private final SoundManager soundManager;

    public MainMenu(Stage stage, SoundManager soundManager) {

        this.stage = stage;
        this.soundManager = soundManager;

        // B·∫≠t nh·∫°c Menu
        soundManager.playMusic("Menu", true);

        // --- 1. ·∫¢nh n·ªÅn ---
        java.net.URL bgUrl = getClass().getClassLoader().getResource("Images/Screen/Menu.jpg");
        if (bgUrl == null) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y file Menu.jpg! Ki·ªÉm tra th∆∞ m·ª•c resources/Images/Screen/");
        }
        Image bgImage = new Image(bgUrl.toExternalForm());
        ImageView background = new ImageView(bgImage);
        background.setFitWidth(800);
        background.setFitHeight(600);

        // --- 2. C√°c n√∫t b·∫•m ---
        Button startBtn = createStyledButton("NEW GAME", neonShadow);
        Button continueBtn = createStyledButton("CONTINUE", neonShadow);
        Button highScoreBtn = createStyledButton("HIGH SCORE", neonShadow);
        Button settingBtn = createStyledButton("SETTING", neonShadow);
        Button exitBtn = createStyledButton("EXIT", neonShadow);

        // ‚úÖ FIX: Ki·ªÉm tra save game M·ªñI L·∫¶N t·∫°o menu
        updateContinueButtonState(continueBtn);

        // G·∫Øn s·ª± ki·ªán hover
        Button[] buttons = {startBtn, continueBtn, settingBtn, highScoreBtn, exitBtn};
        for (Button btn : buttons) {
            if (!btn.isDisabled()) {
                btn.setOnMouseEntered(e -> btn.setStyle(HOVER_STYLE));
                btn.setOnMouseExited(e -> btn.setStyle(NORMAL_STYLE));
            }
        }

        // --- 3. H√†nh ƒë·ªông n√∫t ---
        startBtn.setOnAction(e -> {
            // D·ª´ng nh·∫°c Menu tr∆∞·ªõc khi v√†o game
            this.soundManager.stopMusic();
            // X√≥a save c≈© khi b·∫Øt ƒë·∫ßu game m·ªõi
            GameSaveManager.deleteSave();
            GamePanel gamePanel = new GamePanel(stage, soundManager, false);
            gamePanel.startGame();
        });

        continueBtn.setOnAction(e -> {
            // ‚úÖ FIX: Ki·ªÉm tra l·∫°i tr∆∞·ªõc khi load
            if (GameSaveManager.hasSavedGame()) {
                // D·ª´ng nh·∫°c Menu tr∆∞·ªõc khi v√†o game
                this.soundManager.stopMusic();
                GamePanel gamePanel = new GamePanel(stage, soundManager, true);
                gamePanel.startGame();
            } else {
                System.out.println("‚ö† Kh√¥ng c√≥ save game ƒë·ªÉ ti·∫øp t·ª•c!");
            }
        });

        highScoreBtn.setOnAction(e -> showHighScoreScreen());

        settingBtn.setOnAction(e -> {
            // T·∫°o m√†n h√¨nh Settings m·ªõi
            SettingScreen settingScreen = new SettingScreen(this.stage, this.soundManager);
            // T·∫°o Scene m·ªõi cho settings (s·ª≠ d·ª•ng k√≠ch th∆∞·ªõc 800x600)
            Scene settingScene = new Scene(settingScreen, 800, 600);
            this.stage.setScene(settingScene);
        });

        exitBtn.setOnAction(e -> this.stage.close());

        // --- 4. B·ªë c·ª•c ---
        // Layout d·∫°ng c·ªôt d·ªçc v·ªõi t·∫•t c·∫£ c√°c n√∫t
        VBox menuColumn = new VBox(30, startBtn, continueBtn, settingBtn, highScoreBtn, exitBtn);
        menuColumn.setAlignment(Pos.CENTER);
        menuColumn.setTranslateY(100); // D·ªãch chuy·ªÉn nh√≥m n√∫t xu·ªëng d∆∞·ªõi

        // --- 5. Th√™m v√†o StackPane ---
        getChildren().addAll(background, menuColumn);
        setAlignment(Pos.CENTER);
    }

    /**
     * ‚úÖ NEW: C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t CONTINUE
     */
    private void updateContinueButtonState(Button continueBtn) {
        boolean hasSave = GameSaveManager.hasSavedGame();

        if (!hasSave) {
            continueBtn.setDisable(true);
            continueBtn.setStyle(DISABLED_STYLE);
            // X√≥a s·ª± ki·ªán hover khi disabled
            continueBtn.setOnMouseEntered(null);
            continueBtn.setOnMouseExited(null);
        } else {
            continueBtn.setDisable(false);
            continueBtn.setStyle(NORMAL_STYLE);
            // Th√™m l·∫°i s·ª± ki·ªán hover
            continueBtn.setOnMouseEntered(e -> continueBtn.setStyle(HOVER_STYLE));
            continueBtn.setOnMouseExited(e -> continueBtn.setStyle(NORMAL_STYLE));
        }

        System.out.println("üìã Continue button state: " + (hasSave ? "ENABLED" : "DISABLED"));
    }

    /**
     * H√†m ti·ªán √≠ch t·∫°o n√∫t v·ªõi style v√† effect m·∫∑c ƒë·ªãnh
     */
    private Button createStyledButton(String text, DropShadow effect) {
        Button btn = new Button(text);
        btn.setStyle(NORMAL_STYLE);
        btn.setEffect(effect);
        return btn;
    }

    private void showHighScoreScreen() {
        // T·∫°m th·ªùi ƒëi·ªÉm cao c·ªë ƒë·ªãnh
        int highScore = 12345;

        // ·∫¢nh n·ªÅn
        Image bgImage = new Image(
                getClass().getResource("/Images/Screen/Menu.jpg").toExternalForm()
        );
        ImageView background = new ImageView(bgImage);
        background.setFitWidth(800);
        background.setFitHeight(600);

        // Label ƒëi·ªÉm cao ƒë∆∞·ª£c style ƒë·ªÉ tr√¥ng ph√π h·ª£p v·ªõi theme neon
        Label scoreLabel = new Label("HIGHEST SCORE: " + highScore);
        scoreLabel.setTextFill(Color.web("#ffaa00")); // M√†u cam/v√†ng s√°ng
        scoreLabel.setStyle("-fx-font-size: 48px; -fx-font-weight: bold;");
        DropShadow scoreShadow = new DropShadow(30, Color.web("#ffaa00"));
        scoreLabel.setEffect(scoreShadow);

        // N√∫t quay l·∫°i
        Button backButton = new Button("BACK TO MENU");
        backButton.setStyle("-fx-font-size: 24px; -fx-background-color: #ff8c00; -fx-text-fill: black; -fx-background-radius: 10; -fx-padding: 10 30;");

        backButton.setOnAction(e -> {
            // Truy·ªÅn soundManager khi t·∫°o l·∫°i Menu
            Scene mainMenuScene = createScene(this.stage);
            this.stage.setScene(mainMenuScene);
        });

        VBox box = new VBox(40, scoreLabel, backButton);
        box.setAlignment(Pos.CENTER);

        StackPane root = new StackPane(background, box);
        Scene highScoreScene = new Scene(root, 800, 600);
        this.stage.setScene(highScoreScene);
    }

    public Scene createScene(Stage stage) {
        return new Scene(new MainMenu(stage, this.soundManager), 800, 600);
    }
}